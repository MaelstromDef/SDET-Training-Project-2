pipeline {
    agent any

    environment {
        DB_DDL_AUTO = "none"
    }

    stages{
        stage('Build and Analyze Frontend'){
            steps{
                script{
                    dir('project1Frontend') {
                        sh '''
                            echo "BUILDING FRONTEND"
                            npm install && npm run build
                        '''

                        withSonarQubeEnv('SonarCloud') {
                            sh '''
                                npx sonar-scanner \
                                -Dsonar.projectKey=maelstromdef_warehousemanager-frontend \
                                -Dsonar.projectName=warehousemanager-frontend \
                                -Dsonar.sources=src \
                                -Dsonar.exclusions=**/__tests__/**,src/test/** \
                                
                            '''
                        }
                        // CANT IMPLEMENT UNTIL JEST FOR COVERAGE
                        // npm run test -- --coverage
                        // -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info <--at end of npx sonar-scanner command
                    }
                }  
            }
        }

        stage('Build and Analyze Backend') {
            steps {
                script{
                    dir('warehousedemo') {

                        sh 'mvn clean install -DskipTests=true -Dspring.profiles.active=build'

                        withCredentials([
                            string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                            string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                            string(credentialsId: 'DB_URL', variable: 'DB_URL')
                        ]) {
                            
                            sh 'mvn clean verify -Pcoverage -Dspring.profiles.active=test'

                            withSonarQubeEnv('SonarCloud') {
                                sh '''
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=MaelstromDef_SDET-Training-Project-2 \
                                    -Dsonar.projectName=SDET-Training-Project-2-backend \
                                    -Dsonar.java.binaries=target/classes \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Test Backend'){
            steps{
                withCredentials([
                    string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                    string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                    string(credentialsId: 'DB_URL', variable: 'DB_URL')
                ]) {
                    dir('warehousedemo') {
                        sh "mvn test -Dspring.profiles.active=test"
                    }
                }
            }
        }

        // ORIGINAL CODE FOR THIS STAGE BY: Daniel Maramba & Britt Shook 
        // https://github.com/brittshook/inventory-mgmt-p1 **Skillstorm June-September 2024**
        stage('Performing Functional Tests') {
            steps {
                // clean up project-two-functional-tests repo if leftover from previous build/failure
                sh '''
                    if [ -d "warehousemanagement_functional_tests" ]; then
                        echo "Functional Test Directory exists, deleting..."
                        rm -rf warehousemanagement_functional_tests
                    else
                        echo "Functional Test Directory does not exist, skipping deletion."
                    fi
                '''

                script {
                    // capture IDs to later terminate pipeline project test servers
                    def backendPid
                    def frontendPid
                    withCredentials([
                        string(credentialsId: 'TEST_DB_USER', variable: 'DB_USER'),
                        string(credentialsId: 'TEST_DB_PWD', variable: 'DB_PWD'),
                        string(credentialsId: 'TEST_DB_URL', variable: 'DB_URL')]) {
                            dir('warehousedemo') {
                                backendPid = sh(script: '''
                                    mvn spring-boot:run -Dspring-boot.run.arguments="--DB_URL=${DB_URL} --DB_USERNAME=${DB_USER} --DB_PASSWORD=${DB_PWD}" &
                                    echo \$!
                                ''', returnStdout: true).trim()
                            }
                        }

                    dir('project1Frontend') {
                        frontendPid = sh(script: '''
                            npm install && npm vite --mode test &
                            echo $!
                        ''', returnStdout: true).trim()
                    }

                    // wait for the backend and frontend to be ready
                    sh '''
                        TRIES_REMAINING=16

                        echo 'Waiting for backend to be ready...'
                        while ! curl --output /dev/null --silent http://localhost:8081; do
                            TRIES_REMAINING=$((TRIES_REMAINING - 1))
                            if [ $TRIES_REMAINING -le 0 ]; then
                                echo 'backend did not start within expected time.'
                                exit 1
                            fi
                            echo 'waiting for backend...'
                            sleep 5
                        done
                        echo '***backend is ready***'

                        TRIES_REMAINING=16

                        echo 'Waiting for frontend to be ready...'
                        while ! curl --output /dev/null --silent http://localhost:5173; do
                            TRIES_REMAINING=$((TRIES_REMAINING - 1))
                            if [ $TRIES_REMAINING -le 0 ]; then
                                echo 'frontend did not start within expected time.'
                                exit 1
                            fi
                            echo 'waiting for frontend...'
                            sleep 5
                        done
                        echo '***frontend is ready***'
                    '''

                    // withCredentials([string(credentialsId: 'CUCUMBER_PUBLISH_TOKEN', variable: 'CUCUMBER_TOKEN')]) {
                    //     sh '''
                    //         git clone https://github.com/daniel413x/project-two-functional-tests.git
                    //         cd project-two-functional-tests
                    //         mvn test -Dheadless=true -Dcucumber.publish.token=${CUCUMBER_TOKEN}
                    //     '''
                    // }

                    // clean up project-two-functional-tests repo
                    sh 'rm -rf warehousemanagement_functional_tests'

                    // kill backend and frontend processes
                    sh "kill ${backendPid} || true"
                    sh "kill ${frontendPid} || true"
                }
            }
        }

        stage('Deploy Frontend'){
            steps{
                script{
                    try {
                        withAWS(region: 'us-east-2', credentials: 'AWS_CREDENTIALS') {
                            sh "aws s3 sync project1Frontend/dist s3://ahuggins-warehousemanager-frontend"
                        }
                    } catch (Exception e) {
                            echo "${e}"
                            throw e
                    }   
                }
            }
        }

        stage('Deploy Backend'){
            steps{
                script{
                    withAWS(region: 'us-east-1', credentials: 'AWS_CREDENTIALS'){
                        sh '''
                            cd /var/lib/jenkins/workspace/inventory-manager-pipeline/warehousedemo/

                            VERSION=$(mvn -q \
                                -Dexec.executable=echo \
                                -Dexec.args='${project.version}' \
                                --non-recursive \
                                exec:exec)
                            
                            aws s3 cp target/*.jar s3://ahuggins-inventorymanager-backend 

                            JAR_FILE=$(echo $(basename target/*.jar))

                            aws elasticbeanstalk create-application-version \
                                --application-name ahuggins-warehousemanager \
                                --version-label v${VERSION} \
                                --source-bundle S3Bucket=ahuggins-inventorymanager-backend,S3Key=${JAR_FILE}

                            aws elasticbeanstalk update-environment \
                                --application-name ahuggins-warehousemanager \
                                --environment-name Ahuggins-warehousemanager-env \
                                --version-label v${VERSION}                          

                        '''
                    }  
                }   
            }
        }
        stage('JMeter'){
            steps{
                script{
                    sh '''
                    set OUT=jmeter.save.saveservice.output_format
                    set JMX=/SDET-Training-Project-2/JMeter/JMeterTestPlan.jmx
                    set JTL=/jmeter/reports/jenkins.io.report.jtl
                    /jmeter/bin/jmeter -j %OUT%=xml -n -t %JMX% -l %JTL%
                    '''
                }
            }
        }
    }


}



//docker build -t myjenkins-blueocean .
//docker network create jenkins

//CREATES JENKINS DOCKER CONTAINER ON PORT 8080
//docker run --name jenkins --restart=on-failure --detach `
//--network jenkins `
//--volume /var/run/docker.sock:/var/run/docker.sock `
//--volume jenkins-data:/var/jenkins_home `
//--publish 8080:8080 --publish 50000:50000 myjenkins-blueocean

//ngrok http 8080  <--sets up port 8080 for us to access jenkins locally

//aws configure
//AWS Access KEY ID
//ASW Secret Access Key
//Default Region Name (us-east-1)
//Default output format (json)


//aws elasticbeanstalk create-application-version `
//--application-name simple-sort-app `
//--version-label v1.0.1 `
//--source-bundle S3Bucket=simple-sort-app,S3Key=inventory-manager-1.0.1-SNAPSHOT.jar 

