pipeline {
    agent any

    environment {
        DB_DDL_AUTO = "none"
    }

    stages{

        stage('Build Frontend'){
            steps{
                sh "echo Building Front End"
                sh "cd project1Frontend && npm install && npm run build && ls dist/"
  
            }
        }

        stage('Deploy Frontend'){
            steps{
                script{
                    try {
                        withAWS(region: 'us-east-2', credentials: 'AWS_CREDENTIALS') {
                            sh "aws s3 sync project1Frontend/dist s3://ahuggins-warehousemanager-frontend"
                        }
                    }catch (Exception e) {
                            echo "${e}"
                            throw e
                    }   
                }
            }
        }

        stage('Build and Analyze Backend') {
            steps {
                script{
                    withCredentials([
                        string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                        string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                        string(credentialsId: 'DB_URL', variable: 'DB_URL')
                    ]) {
                        
                        sh "echo Testing Credentials: BD_USERNAME: ${DB_USERNAME}"

                        dir('warehousedemo') {
                            sh 'mvn clean verify -Pcoverage -Dspring.profiles.active=build'

                            // withSonarQubeEnv('SonarCloud') {
                            //     sh '''
                            //     mvn sonar:sonar \
                            //         -Dsonar.projectKey=brittshook_inventory-mgmt-p1 \
                            //         -Dsonar.projectName=inventory-mgmt-p1-backend \
                            //         -Dsonar.java.binaries=target/classes \
                            //         -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                            //     '''
                            // }
                        }
                        sh 'cd warehousedemo && mvn clean install -DskipTests=true -Dspring.profiles.active=build'
                    }
                }
            }
        }

        // stage('Test Backend'){
        //     steps{
        //         sh "cd demo && mvn test"
        //     }
        // }
        stage('Deploy Backend'){
            steps{
                dir('warehousedemo'){
                    sh '''
                        cd /var/lib/jenkins/workspace/inventory-manager-pipeline/warehousedemo/

                            VERSION=$(mvn -q \
                            -Dexec.executable=echo \
                            -Dexec.args='${project.version}' \
                            --non-recursive \
                            exec:exec).trim()
                    '''
                    withAWS(region: 'us-east-1', credentials: 'AWS_CREDENTIALS'){
                        sh '''
                            cd /var/lib/jenkins/workspace/inventory-manager-pipeline/warehousedemo/target
                            echo ${VERSION}

                        '''
                            //                         aws elasticbeanstalk create-application-version \
                            // --application-name ahuggins-warehousemanager-backend \
                            // --version-label v${VERION} \
                            // --source-bundle S3Bucket=ahuggins-warehouse-backend,S3Key=warehousedemo-${VERSION}.jar
                    }  
                }   
            }
        }
    }
}


        
        // stage('Deploy Frontend'){
        //     steps{
        //         script{
        //             try {
        //               withAWS(region: 'us-east-1', credentials: 'AWS_CREDENTIALS'){
        //                 sh "aws s3 sync frontend/dist s3://bjgomes-bucket-sdet" 
        //                 }
        //             }catch (Exception e) {
        //                     echo "${e}"
        //                     throw e
        //             }   
        //         }
        //     }
        // }
        // stage('Build Backend'){
        //     steps{
        //         sh "cd demo && mvn clean install && ls target/"
        //     }
        // }
        // stage('Test Backend'){
        //     steps{
        //         sh "cd demo && mvn test"
        //     }
        // }
        // stage('Deploy Backend'){
        //     steps{
        //         script{
        //           withAWS(region: 'us-east-1', credentials: 'AWS_CREDENTIALS'){
        //                 sh 'pwd'
        //                 sh "aws s3 cp demo/target/demo-1.0-SNAPSHOT.jar s3://bjgomes-bucket-sdet-backend"
        //                 sh "echo 'aws elasticbeanstalk create-application-version --application-name myName --version-label 0.0.1 --source-bundle S3Bucket=\"bjgomes-bucket-sdet-backend\",S3Key=\"demo-1.0-SNAPSHOT.jar\"'"
        //                 sh "ech 'aws elasticbeanstalk update-environment --environment-name myName --version-label 0.0.1'"
        //             }  
        //         }   
        //     }
        // }

//docker build -t myjenkins-blueocean .
//docker network create jenkins

//CREATES JENKINS DOCKER CONTAINER ON PORT 8080
//docker run --name jenkins --restart=on-failure --detach `
//--network jenkins `
//--volume /var/run/docker.sock:/var/run/docker.sock `
//--volume jenkins-data:/var/jenkins_home `
//--publish 8080:8080 --publish 50000:50000 myjenkins-blueocean

//ngrok http 8080  <--sets up port 8080 for us to access jenkins locally

//aws configure
//AWS Access KEY ID
//ASW Secret Access Key
//Default Region Name (us-east-1)
//Default output format (json)


//aws elasticbeanstalk create-application-version `
//--application-name simple-sort-app `
//--version-label v1.0.1 `
//--source-bundle S3Bucket=simple-sort-app,S3Key=inventory-manager-1.0.1-SNAPSHOT.jar 

//aws elasticbeanstalk update-environment `
//--application-name simple-sort-app `
//--environment-name simple-sort-app-env `
//--version-label v1.0.1