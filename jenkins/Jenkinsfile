pipeline {
    agent any

    environment {
        DB_DDL_AUTO = "none"
    }

    stages{
        stage('Build and Analyze Frontend'){
            steps{
                script{
                    withSonarQubeEnv('SonarCloud') {
                        dir('project1Frontend') {
                            sh '''
                                npm install
                                npm run build

                                npx sonar-scanner \
                                -Dsonar.projectKey=maelstromdef_warehousemanager-frontend \
                                -Dsonar.projectName=warehousemanager-frontend \
                                -Dsonar.sources=src \
                                -Dsonar.exclusions=**/__tests__/**,src/test/** \
                                
                            '''
                        }
                        // CANT IMPLEMENT UNTIL JEST FOR COVERAGE
                        // npm run test -- --coverage
                        // -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info <--at end of npx sonar-scanner command
                    }
                }  
            }
        }

        stage('Build and Analyze Backend') {
            steps {
                script{
                    dir('warehousedemo') {
                        withCredentials([
                            string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                            string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                            string(credentialsId: 'DB_URL', variable: 'DB_URL')
                        ]) {
                            
                            sh "echo Testing Credentials: BD_USERNAME: ${DB_USERNAME}"

                            
                            sh 'mvn clean verify -Pcoverage -Dspring.profiles.active=build'

                            withSonarQubeEnv('SonarCloud') {
                                sh '''
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=MaelstromDef_SDET-Training-Project-2 \
                                    -Dsonar.projectName=SDET-Training-Project-2-backend \
                                    -Dsonar.java.binaries=target/classes \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                                '''
                            }
                        }
                    }

                    sh 'cd warehousedemo && mvn clean install -DskipTests=true -Dspring.profiles.active=build'
                }
            }
        }

        stage('Test Backend'){
            steps{
                dir('warehousedemo') {
                    sh "mvn test -Dspring.profiles.active=test"
                }
            }
        }

        stage('Deploy Frontend'){
            steps{
                script{
                    try {
                        withAWS(region: 'us-east-2', credentials: 'AWS_CREDENTIALS') {
                            sh "aws s3 sync project1Frontend/dist s3://ahuggins-warehousemanager-frontend"
                        }
                    } catch (Exception e) {
                            echo "${e}"
                            throw e
                    }   
                }
            }
        }

        stage('Deploy Backend'){
            steps{
                script{
                    withAWS(region: 'us-east-1', credentials: 'AWS_CREDENTIALS'){
                        sh '''
                            cd /var/lib/jenkins/workspace/inventory-manager-pipeline/warehousedemo/

                            VERSION=$(mvn -q \
                                -Dexec.executable=echo \
                                -Dexec.args='${project.version}' \
                                --non-recursive \
                                exec:exec)
                            
                            aws s3 cp target/*.jar s3://ahuggins-inventorymanager-backend 

                            JAR_FILE=$(echo $(basename target/*.jar))

                            aws elasticbeanstalk create-application-version \
                                --application-name ahuggins-warehousemanager \
                                --version-label v${VERSION} \
                                --source-bundle S3Bucket=ahuggins-inventorymanager-backend,S3Key=${JAR_FILE}

                            aws elasticbeanstalk update-environment \
                                --application-name ahuggins-warehousemanager \
                                --environment-name Ahuggins-warehousemanager-env \
                                --version-label v${VERSION}                          

                        '''
                    }  
                }   
            }
        }
    }


}



//docker build -t myjenkins-blueocean .
//docker network create jenkins

//CREATES JENKINS DOCKER CONTAINER ON PORT 8080
//docker run --name jenkins --restart=on-failure --detach `
//--network jenkins `
//--volume /var/run/docker.sock:/var/run/docker.sock `
//--volume jenkins-data:/var/jenkins_home `
//--publish 8080:8080 --publish 50000:50000 myjenkins-blueocean

//ngrok http 8080  <--sets up port 8080 for us to access jenkins locally

//aws configure
//AWS Access KEY ID
//ASW Secret Access Key
//Default Region Name (us-east-1)
//Default output format (json)


//aws elasticbeanstalk create-application-version `
//--application-name simple-sort-app `
//--version-label v1.0.1 `
//--source-bundle S3Bucket=simple-sort-app,S3Key=inventory-manager-1.0.1-SNAPSHOT.jar 

