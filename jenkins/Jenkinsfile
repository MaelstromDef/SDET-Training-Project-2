pipeline {
    agent any

    stages{

        stage('Build Frontend'){
            steps{
                sh "echo Building Front End"
                sh "cd project1Frontend && npm install && npm run build && ls dist/"
  
            }
        }

        stage('Testing 2'){
            steps{
                sh "echo Testing 2"                
            }
        }
        stage('Testing 3'){
            steps{
                sh "echo Testing 3"                
            }
        }
    }
}


        
        // }
        // stage('Deploy Frontend'){
        //     steps{
        //         script{
        //             try {
        //               withAWS(region: 'us-east-1', credentials: 'AWS_CREDENTIALS'){
        //                 sh "aws s3 sync frontend/dist s3://bjgomes-bucket-sdet" 
        //                 }
        //             }catch (Exception e) {
        //                     echo "${e}"
        //                     throw e
        //             }   
        //         }
        //     }
        // }
        // stage('Build Backend'){
        //     steps{
        //         sh "cd demo && mvn clean install && ls target/"
        //     }
        // }
        // stage('Test Backend'){
        //     steps{
        //         sh "cd demo && mvn test"
        //     }
        // }
        // stage('Deploy Backend'){
        //     steps{
        //         script{
        //           withAWS(region: 'us-east-1', credentials: 'AWS_CREDENTIALS'){
        //                 sh 'pwd'
        //                 sh "aws s3 cp demo/target/demo-1.0-SNAPSHOT.jar s3://bjgomes-bucket-sdet-backend"
        //                 sh "echo 'aws elasticbeanstalk create-application-version --application-name myName --version-label 0.0.1 --source-bundle S3Bucket=\"bjgomes-bucket-sdet-backend\",S3Key=\"demo-1.0-SNAPSHOT.jar\"'"
        //                 sh "ech 'aws elasticbeanstalk update-environment --environment-name myName --version-label 0.0.1'"
        //             }  
        //         }   
        //     }
        // }

//docker build -t myjenkins-blueocean .
//docker network create jenkins

//CREATES JENKINS DOCKER CONTAINER ON PORT 8080
//docker run --name jenkins --restart=on-failure --detach `
//--network jenkins `
//--volume /var/run/docker.sock:/var/run/docker.sock `
//--volume jenkins-data:/var/jenkins_home `
//--publish 8080:8080 --publish 50000:50000 myjenkins-blueocean

//ngrok http 8080  <--sets up port 8080 for us to access jenkins locally

//aws configure
//AWS Access KEY ID
//ASW Secret Access Key
//Default Region Name (us-east-1)
//Default output format (json)


//aws elasticbeanstalk create-application-version `
//--application-name simple-sort-app `
//--version-label v1.0.1 `
//--source-bundle S3Bucket=simple-sort-app,S3Key=inventory-manager-1.0.1-SNAPSHOT.jar 

//aws elasticbeanstalk update-environment `
//--application-name simple-sort-app `
//--environment-name simple-sort-app-env `
//--version-label v1.0.1